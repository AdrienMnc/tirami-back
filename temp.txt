// Mettre à jour le username d'un utilisateur
  updateUsername: async (req, res) => {
    const { id } = req.params;
    const { username } = req.body;
    // Récupérer l'utilisateur à modifier
    const userToModify = await prisma.user.findUnique({
      where: {
        id: parseInt(id),
      },
    });
    if (!userToModify) {
      return res.status(400).json({ message: "User not found" });
    }
    // Vérifier que l'utilisateur connecté est bien l'utilisateur à modifier
    const loggedUserId = getUserId(req);
    if (loggedUserId != id) {
      return res.status(400).json({ message: "Unauthorized" });
    }
    // Vérifier que le nouveau nom d'utilisateur n'est pas déjà pris
    const usernameAlreadyExists = await prisma.user.findFirst({
      where: {
        username: username,
      },
    });
    if (usernameAlreadyExists && usernameAlreadyExists.id != id) {
      return res.status(400).json({ message: "Username already exists" });
    }
    // Mettre à jour l'utilisateur avec le nouveau username
    const user = await prisma.user.update({
      where: {
        id: parseInt(id),
      },
      data: {
        username: username,
      },
    });
    if (!user) {
      return res.status(400).json({ message: "Username not updated" });
    }
    res.status(200).json({ message: "Username updated", user });
  },





  // Fonction pour vérifier que l'utilisateur connecté est bien l'utilisateur à modifier ou supprimer
function checkUser(req, res, next) {
  const userId = getUserId(req);
  const { id } = req.params;
  if (userId != id) {
    return res.status(400).json({ message: "Unauthorized" });
  }
  next();
}