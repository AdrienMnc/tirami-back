datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_PRISMA")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

model User {
  id                 Int                    @id @default(autoincrement())
  username           String                 @unique
  email              String                 @unique
  password           String
  red_flag           Int                    @default(0)
  created_at         DateTime               @default(now())
  role               Role                   @default(USER)
  picture            Picture[]
  posts              Post[]
  following          Follow[]               @relation("Following")
  followed_by        Follow[]               @relation("Followed_by")
  like               Like[]
  my_restaurants     MyFavoriteRestaurant[]
  allowing_followers Boolean                @default(true)
  deactivated        Boolean                @default(false)
  deactivated_at     DateTime?
  verified           Boolean                @default(false)

  @@map("users")
}

model InvalidToken {
  id             Int      @id @default(autoincrement())
  token          String   @unique
  invalidated_at DateTime @default(now())

  @@map("invalid_tokens")
}

model Restaurant {
  id              Int                    @id @default(autoincrement())
  name_api        String
  id_api          String                 @unique
  description_api String                 @unique // contient le nom et l'adresse du restaurant tels que fournis par l'API
  my_restaurants  MyFavoriteRestaurant[]
  post            Post[]
  averageRating   Float                  @default(0) @map("average_rating")
  postCount       Int                    @default(0) @map("post_count")

  @@map("restaurants")
}

model Picture {
  id             Int       @id @default(autoincrement())
  url            String    @unique
  owner          User      @relation(fields: [owner_id], references: [id]) // onDelete: Cascade)
  owner_id       Int
  profile_pic    Boolean   @default(false)
  post           Post?     @relation("PostPictures", fields: [post_id], references: [id]) // onDelete: Cascade)
  post_id        Int?
  deactivated    Boolean   @default(false)
  deactivated_at DateTime?

  @@map("pictures")
}

model Dessert {
  id   Int    @id @default(autoincrement())
  name String @unique
  type String @default("Tiramisu")
  post Post[]

  @@map("desserts")
}

model Post {
  id                 Int        @id @default(autoincrement())
  content            String
  rating             Int
  banned             Boolean    @default(false)
  signaled           Int        @default(0)
  created_at         DateTime   @default(now())
  author             User       @relation(fields: [author_id], references: [id]) // onDelete: Cascade)
  author_id          Int
  author_deactivated Boolean    @default(false)
  post_pics          Picture[]  @relation("PostPictures")
  like               Like[]
  restaurant         Restaurant @relation(fields: [restaurant_id], references: [id]) // onDelete: Cascade)
  restaurant_id      Int
  dessert            Dessert    @relation(fields: [dessert_id], references: [id])
  dessert_id         Int
  deactivated        Boolean    @default(false)
  deactivated_at     DateTime?

  @@map("posts")
}

model Follow {
  id             Int       @id @default(autoincrement())
  follower       User      @relation("Following", fields: [follower_id], references: [id]) // onDelete: Cascade)
  follower_id    Int
  followed       User      @relation("Followed_by", fields: [followed_id], references: [id]) // onDelete: Cascade)
  followed_id    Int
  deactivated    Boolean   @default(false)
  deactivated_at DateTime?

  @@map("follows")
}

model Like {
  id             Int       @id @default(autoincrement())
  user           User      @relation(fields: [user_id], references: [id]) // onDelete: Cascade)
  user_id        Int
  post           Post      @relation(fields: [post_id], references: [id]) // onDelete: Cascade)
  post_id        Int
  deactivated    Boolean   @default(false)
  deactivated_at DateTime?

  @@map("likes")
}

model MyFavoriteRestaurant {
  id            Int        @id @default(autoincrement())
  user          User       @relation(fields: [user_id], references: [id]) // onDelete: Cascade)
  user_id       Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id]) // onDelete: Cascade)
  restaurant_id Int

  @@map("my_favorite_restaurants")
}

enum Role {
  USER
  ADMIN
  MODO
}
